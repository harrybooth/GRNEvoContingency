using DrWatson

@quickactivate "GRNEvoContingency"


using DifferentialEquations
using Random
using Parameters
using StatsBase
using Printf
using Distributed

using Base.Threads
using Base.Threads: @spawn

using JLD
using LinearAlgebra
using DataInterpolations

@everywhere include(srcdir("Evolution.jl"))
@everywhere include(srcdir("FitnessFunctions.jl"))
@everywhere include(srcdir("TissueModel_ND.jl"))

@everywhere include(srcdir("TrajectoryHandling.jl"))
@everywhere include(srcdir("FitnessLandscapes.jl"))

function last_networks(run_id,fitness_route,geno_route) 

    unique_fitness_routes = unique(fitness_route)

    result = []

    for fb in unique_fitness_routes

        fb_ids = findall(x->x == fb,fitness_route)

        last_id = maximum(fb_ids)

        push!(result,(run_id,fb,geno_route[:,last_id]))
    end

    return result

end

# evo_traces_mi = load(datadir("sims/repeated_evolution_different_topologies","deletion_prob=0.05_max_gen=40000_mut_prob=0.1_n_target_stripe=1_n_traj=5000_noise_cv=0.5_start_network_name=half_right_topology=mutual_inh_β=1.0_1000.jld2"))["data"];

# n_sub_sample = 500

run_data_mi = load(datadir("sims/repeated_evolution_different_topologies","mutual_inhmi_stripe_0.5_mutation_rate_1000.jld2"))["raw_data"];

evo_traces_mi = map(x->x[2],run_data_mi);

gt_mi = GenoTrajectories(evo_traces_mi);

end_fitness_mi = map(x->x[end],gt_mi.fitness_traj);

converged_mi = end_fitness_mi .> 0.9

n_sub_sample = 1000

gt_mi = GenoTrajectories(evo_traces_mi[converged_mi][1:n_sub_sample]);

############

grn_parameters = DefaultGRNParameters();

development = DefaultGRNSolver()

viable_mutations = ones(Int,Ng,Ng+1)

noise_cv = 0.5

mutation_op = MutationOperator(Normal,(μ = 0.0,σ = noise_cv),findall(viable_mutations .> 0))

n_sample_func() = 1

deletion_prob = 0.05

noise_params = (n_sample_func,deletion_prob)

mutate_function = i -> noise(i,mutation_op,noise_params);

noise_application = (x,n) -> mutate_method(x,n)

output_gene = 3

n_target_stripe = 1

fitness_function = s -> fitness_evaluation(s,x->malt_fitness(x,n_target_stripe),output_gene);

############


all_unique_fitness = unique(reduce(vcat,map(x->unique(x),gt_mi.fitness_traj)))

n_bin = 10

hist_edges = zeros(n_bin+1)

hist_edges[1] = gt_mi.initial_fitness

hist_edges[2:n_bin] .= LinRange(gt_mi.initial_fitness+eps(),0.9,n_bin-1) |> collect

hist_edges[n_bin+1] = 1.

n_fit_bin = length(hist_edges) - 1

h_fitness = fit(Histogram, all_unique_fitness, hist_edges; closed = :left) 

fitness_routes = map(traj->map(f->StatsBase.binindex(h_fitness, f),traj),gt_mi.fitness_traj);

ln_fr = map(x -> last_networks(x[1],x[2][1],x[2][2]), enumerate(zip(fitness_routes,gt_mi.geno_traj)));

ln_frv = reduce(vcat,ln_fr)

###############

result =  Dict()

for fb_n in 2:9

    fb_networks = filter(x->x[2] == fb_n, ln_frv)

    eval_networks = map(x->x[3],fb_networks)

    run_ids = map(x->x[1],fb_networks)

    n_sample = length(eval_networks)

    dmat = zeros(n_sample,n_sample)

    dmat_id = [(i,j) for i in 1:n_sample, j in 1:n_sample if i>j]

    @sync for id in dmat_id
        @spawn dmat[id...] = instability(eval_networks[id[1]],eval_networks[id[2]],grn_parameters,development,fitness_function)
    end

    result[fb_n] = (dmat,run_ids,eval_networks)

    print("Status: completed " * string(fb_n) * " \n")

end

save(datadir("sims/repeated_evolution_different_topologies","mutual_inhmi_stripe_0.5_mutation_rate_1000_lmc_fitness_bins.jld2"),"data",result) 