using DrWatson

@quickactivate "GRNEvoContingency"

using DifferentialEquations
using Random
using Parameters
using StatsBase
using Printf
using Distributed

using Base.Threads
using Base.Threads: @spawn

using ClusterManagers

# addprocs(SlurmManager(500), N=16, topology=:master_worker, exeflags="--project=.")

@everywhere include(srcdir("Evolution.jl"))
@everywhere include(srcdir("FitnessFunctions.jl"))

@everywhere all_experiments = ["Experiment_1.jl"]

for exp_name in all_experiments

    @everywhere include(srcdir("ExperimentSetups/"*$exp_name))

    evo_trace = SSWM_Evolution(start_network,grn_parameters,β,max_gen,tolerance,fitness_function,mutate_function)

    sim = fill(evo_trace,n_traj)

    sim_id = findall(x->!x.converged,sim)

    n_trials =  0

    while length(sim_id) != 0

        n_trials += length(sim_id)

        @sync for i in sim_id
            @spawn sim[i] = SSWM_Evolution(start_network,grn_parameters,β,max_gen,tolerance,fitness_function,mutate_function)
        end

        sim_id = findall(x->!x.converged,sim)

    end

    fulld = Dict()

    fulld["fitness_traj"] = map(et->et.fitness_trajectory,sim)
    fulld["geno_traj"] = map(et->reduce(hcat,map(x->vec(x),et.traversed_networks)),sim);
    fulld["retcodes"] = map(et->map(x-> x == :Terminated ? 1 : 0,et.retcodes),sim)

    @tag!(fulld)

    safesave(datadir("exp_raw",exp_name * "_RawData"), fulld)

    summaryd = Dict()

    summaryd["ConvergenceRate"] = n_traj/n_trials

    @tag!(summaryd)

    safesave(datadir("exp_summaries",exp_name * "_Summary"), summaryd)

end
